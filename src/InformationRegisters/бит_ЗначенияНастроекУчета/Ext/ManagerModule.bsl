#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Или МобильноеПриложениеСервер Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значение константы по указанному идентификатору.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//  Разрез - РегистрыСведений.бг_ЗначенияДополнительныхКонстант.Разрез.Тип - Разрез значения константы (необязательный).
//
// Возвращаемое значение:
//   Произвольный - Значение константы.
//
Функция ЗначениеКонстанты(Идентификатор, Разрез = Неопределено) Экспорт

	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(Идентификатор);
	
	Если ОписаниеКонстанты = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Получение значения неизвестной константы %1'"), Идентификатор);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_ЗначенияДополнительныхКонстант.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК бг_ЗначенияДополнительныхКонстант
	|ГДЕ
	|	бг_ЗначенияДополнительныхКонстант.Константа.Идентификатор = &Идентификатор
	|	И &ОтборПоРазрезу";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Если Разрез = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоРазрезу", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоРазрезу", "бг_ЗначенияДополнительныхКонстант.Разрез = &Разрез");
		Запрос.УстановитьПараметр("Разрез", Разрез);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеКонстанты = Неопределено;
	
	Если Выборка.Следующий() Тогда
		
		Если ОписаниеКонстанты.ХранитьСтроковыйГУИД Тогда
			ЗначениеКонстанты = ЗначениеКонстантыПоГУИДу(Выборка.Значение, ОписаниеКонстанты);
		Иначе
			ЗначениеКонстанты = Выборка.Значение;
		КонецЕсли;
		
	Иначе
		Справочники.бит_НастройкиУчета.НайтиСоздатьКонстанту(Идентификатор);
	КонецЕсли;
	
	Если ЗначениеКонстантыЗаполнено(ЗначениеКонстанты) Тогда
		
		Если Не ОписаниеКонстанты.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеКонстанты)) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Указан недопустимый тип значения константы %1'"), Идентификатор);
		КонецЕсли;
		
		Возврат ЗначениеКонстанты;
	
	ИначеЕсли ОписаниеКонстанты.ОбязательноеЗаполнение И ЗначениеКонстанты = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru='Не заполнено значение константы %1'"), Идентификатор);
		
	ИначеЕсли ОписаниеКонстанты.ЗначениеПоУмолчанию <> Неопределено Тогда
		
		Возврат ОписаниеКонстанты.ЗначениеПоУмолчанию;
		
	Иначе
		
		Возврат ЗначениеКонстанты;
		
	КонецЕсли;
	
КонецФункции

// Возвращает значения констант по указанным идентификаторам.
//
// Параметры:
//  ИдентификаторыСтрокой - Строка - Идентификаторы констант строкой, разделенные ", ".
//
// Возвращаемое значение:
//   Структура:
//     * Ключ - Идентификатор константы.
//     * Значение - Произвольный - Значение константы.
//
Функция ЗначенияКонстант(Знач ИдентификаторыСтрокой) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияКонстант = Новый Структура;
	
	ИдентификаторыСтрокой = СтрЗаменить(ИдентификаторыСтрокой, " ", "");
	ИдентификаторыСтрокой = СтрЗаменить(ИдентификаторыСтрокой, Символы.ПС, "");
	
	СписокИдентификаторов = Новый Массив;
	
	Идентификаторы = СтрРазделить(ИдентификаторыСтрокой, ",", Ложь);
	
	Для каждого ИдентификаторСтрокой Из Идентификаторы Цикл
	
		Идентификатор = СокрЛП(ИдентификаторСтрокой);
		СписокИдентификаторов.Добавить(Идентификатор);
		
		ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(Идентификатор);
		
		Если ОписаниеКонстанты = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Получение значения неизвестной константы %1'"), Идентификатор);
		КонецЕсли;
		
		Если ОписаниеКонстанты.ЗначениеПоУмолчанию <> Неопределено Тогда
			ЗначенияКонстант.Вставить(Идентификатор, ОписаниеКонстанты.ЗначениеПоУмолчанию);
		Иначе
			ЗначенияКонстант.Вставить(Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияКонстант.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(ЗначенияКонстант.Значение) КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		бит_НастройкиУчета.Идентификатор КАК Идентификатор,
	|		ЕСТЬNULL(бг_ЗначенияДополнительныхКонстант.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|	ИЗ
	|		Справочник.бит_НастройкиУчета КАК бит_НастройкиУчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК бг_ЗначенияДополнительныхКонстант
	|			ПО (бг_ЗначенияДополнительныхКонстант.Константа = бит_НастройкиУчета.Ссылка)
	|	ГДЕ
	|		бит_НастройкиУчета.Идентификатор В(&СписокИдентификаторов)) КАК ЗначенияКонстант
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияКонстант.Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("СписокИдентификаторов", СписокИдентификаторов);
	
	ТаблицаКонстант = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицыКонстант Из ТаблицаКонстант Цикл
	
		ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(СтрокаТаблицыКонстант.Идентификатор);
		
		Если ЗначениеКонстантыЗаполнено(СтрокаТаблицыКонстант.Значение) Тогда
			
			ЗначениеКонстанты = Неопределено;
			
			Если ОписаниеКонстанты.ХранитьСтроковыйГУИД Тогда
				ЗначениеКонстанты = ЗначениеКонстантыПоГУИДу(СтрокаТаблицыКонстант.Значение, ОписаниеКонстанты);
			Иначе
				ЗначениеКонстанты = СтрокаТаблицыКонстант.Значение;
			КонецЕсли;
			
			Если Не ОписаниеКонстанты.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеКонстанты)) Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru='Указан недопустимый тип значения константы %1'"), Идентификатор);
			Иначе
				ЗначенияКонстант[СтрокаТаблицыКонстант.Идентификатор] = ЗначениеКонстанты;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ДанныеЗначенияКонстанты Из ЗначенияКонстант Цикл
		
		ПараметрыПоиска = Новый Структура("Идентификатор", ДанныеЗначенияКонстанты.Ключ);
		Если ТаблицаКонстант.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
			Справочники.бит_НастройкиУчета.НайтиСоздатьКонстанту(ДанныеЗначенияКонстанты.Ключ);
		КонецЕсли;
		
		ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(ДанныеЗначенияКонстанты.Ключ);
		
		Если ОписаниеКонстанты.ОбязательноеЗаполнение
			И Не ЗначениеКонстантыЗаполнено(ДанныеЗначенияКонстанты.Значение) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru='Не заполнено значение константы %1'"), ОписаниеКонстанты.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияКонстант;
	
КонецФункции

// Возвращает признак - используется ли функциональная опция.
//  Под функциональной опцией здесь понимаем дополнительные константы с типом значения "Булево".
//  Считается, что Функциональная опция используется, в случае, если найдено 
//  хотя бы одно значение константы, установленное в ИСТИНА.
//  Например, если константу задаем в разрезе организаций, то считаем, что
//  ФО используется, если установлено ИСТИНА хотябы по одной организации.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//
// Возвращаемое значение:
//   Булево - Признак использования ФО.
//
Функция ФункциональнаяОпцияИспользуется(Идентификатор) Экспорт	

	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(Идентификатор);
	Если ОписаниеКонстанты = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Получение значения неизвестной константы %1'"), Идентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_ЗначенияДополнительныхКонстант.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК бг_ЗначенияДополнительныхКонстант
	|ГДЕ
	|	бг_ЗначенияДополнительныхКонстант.Константа.Идентификатор = &Идентификатор
	|	И бг_ЗначенияДополнительныхКонстант.Значение = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает таблицу значений всех констант по регистру бг_ЗначенияДополнительныхКонстант.
//
// Возвращаемое значение:
//     ТаблицаЗначений:
//       * Константа - СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на константу.
//       * Идентификатор - Строка - Идентификатор константы.
//       * Разрез - Произвольный - Аналитика значения константы.
//       * Значение - Произвольный - Значение константы.
//
Функция ЗначенияВсехКонстант() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ЗначенияДополнительныхКонстант.Константа КАК Константа,
	|	бг_ЗначенияДополнительныхКонстант.Константа.Идентификатор КАК Идентификатор,
	|	бг_ЗначенияДополнительныхКонстант.Разрез КАК Разрез,
	|	бг_ЗначенияДополнительныхКонстант.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК бг_ЗначенияДополнительныхКонстант
	|ГДЕ
	|	НЕ бг_ЗначенияДополнительныхКонстант.Константа.ПометкаУдаления
	|	И бг_ЗначенияДополнительныхКонстант.Константа.Идентификатор <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	Разрез";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует запись в регистр бг_ЗначенияДополнительныхКонстант по указанной константе и значению. 
//
// Параметры:
//  Константа - СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на константу.
//  Значение - Произвольный - Устанавливаемое значение.
//
Процедура УстановитьЗначениеКонстантыБезРазреза(Константа, Значение) Экспорт

	МенеджерЗаписи = РегистрыСведений.бит_ЗначенияНастроекУчета.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Константа = Константа;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

// Формирует записи в регистр бг_ЗначенияДополнительныхКонстант по указанной константе и значениям с разрезами. 
//
// Параметры:
//  Константа - СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на константу.
//  Значения - ТаблицаЗначений - Значения константы по разрезам.
//    * Разрез - Произвольный - Аналитика значения константы.
//    * Значение - Произвольный - Значение константы.
//
Процедура УстановитьЗначенияКонстантыСРазрезом(Константа, Значения) Экспорт

	НаборЗаписей = РегистрыСведений.бит_ЗначенияНастроекУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Константа.Установить(Константа);
	
	Для каждого СтрокаЗначения Из Значения Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗначения);
		Запись.Константа = Константа;
	КонецЦикла;
	
	Если Значения.Количество() = 1 Тогда
		НаборЗаписей.Отбор.Разрез.Установить(Значения[0].Разрез);
	КонецЕсли;	
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеКонстантыЗаполнено(ЗначениеКонстанты)

	Если ЗначениеКонстанты = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ЗначениеКонстанты) = Новый ОписаниеТипов("Булево") Тогда
		Возврат Истина;
	Иначе
		Возврат ЗначениеЗаполнено(ЗначениеКонстанты);
	КонецЕсли;

КонецФункции

Функция ЗначениеКонстантыПоГУИДу(НайденноеЗначениеКонстанты, ОписаниеКонстанты)
	
	ДлинаГУИДа = 36;
	
	ЗначениеКонстанты = Неопределено;
	
	Если ТипЗнч(НайденноеЗначениеКонстанты) = Тип("Строка")
		И СтрДлина(НайденноеЗначениеКонстанты) = ДлинаГУИДа
		И СтрНайти(ОписаниеКонстанты.ИмяТипа, "Справочник") > 0 Тогда
		
		ИмяОбъектаМетаданных = СтрЗаменить(ОписаниеКонстанты.ИмяТипа, "СправочникСсылка.", "");
		
		ЗначениеКонстанты = Справочники[ИмяОбъектаМетаданных].ПолучитьСсылку(
			Новый УникальныйИдентификатор(
				НайденноеЗначениеКонстанты));
		
	КонецЕсли;
	
	Возврат ЗначениеКонстанты;
	
КонецФункции

#КонецОбласти

#КонецЕсли
