#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеКонстанты = Параметры.ДанныеКонстанты;
	ОбновитьИнформационнуюНадпись();
	
	СоздатьРеквизитыТаблицыЗначенияКонстанты();
	СоздатьЭлементыТаблицыЗначенияКонстанты();
	
	ЗаполнитьЗначенияКонстанты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗначенияКонстантыРазрезПриИзменении(Элемент)
	
	// Не допустить ввода дубля строки с уже имеющимся разрезом.
	ТекущаяСтрока = Элементы.ЗначенияКонстанты.ТекущиеДанные;
	
	Для каждого СтрокаЗначенияКонстанты Из ЗначенияКонстанты Цикл
		
		Если СтрокаЗначенияКонстанты = ТекущаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаЗначенияКонстанты.Разрез = ТекущаяСтрока.Разрез Тогда
			ТекущаяСтрока.Разрез = Неопределено;
			Прервать;
	    КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьЗначения(Команда)

	Если Не ЗначенияКонстантыЗаполненыКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(СохранитьЗначенияСервер());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьИнформационнуюНадпись()

	Элементы.ДекорацияИнформация.Заголовок = СтрШаблон(
		НСтр("ru='Ввод значений по константе %1'"),
		ДанныеКонстанты.Константа);

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыТаблицыЗначенияКонстанты()

	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"Разрез",
		    ДанныеКонстанты.ТипРазреза,
			"ЗначенияКонстанты"));
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"Значение",
		    ДанныеКонстанты.ТипЗначения,
			"ЗначенияКонстанты"));
		
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыТаблицыЗначенияКонстанты()

	// Таблица формы ЗначенияКонстанты
	ТаблицаФормыЗначенияКонстанты = Элементы.Добавить(
		"ЗначенияКонстанты",
		Тип("ТаблицаФормы"));
	
	ТаблицаФормыЗначенияКонстанты.ПутьКДанным = "ЗначенияКонстанты";
	
	// Колонка ЗначенияКонстанты.Разрез
	КолонкаРазрез = Элементы.Добавить(
		"ЗначенияКонстантыРазрез",
		Тип("ПолеФормы"),
		ТаблицаФормыЗначенияКонстанты); 
	
	КолонкаРазрез.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаРазрез.ПутьКДанным = "ЗначенияКонстанты.Разрез";
	КолонкаРазрез.УстановитьДействие("ПриИзменении", "ЗначенияКонстантыРазрезПриИзменении");
	
	// Колонка ЗначенияКонстанты.Значение
	КолонкаЗначение = Элементы.Добавить(
		"ЗначенияКонстантыЗначение",
		Тип("ПолеФормы"),
		ТаблицаФормыЗначенияКонстанты); 
		
	Если ДанныеКонстанты.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
		КолонкаЗначение.Вид = ВидПоляФормы.ПолеФлажка;
	Иначе
		КолонкаЗначение.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаЗначение.АвтоОтметкаНезаполненного = ДанныеКонстанты.ОбязательноеЗаполнение;	
		Если ДанныеКонстанты.ТипЗначения <> Новый ОписаниеТипов("Строка") Тогда
			КолонкаЗначение.КнопкаВыбора = Истина;
			КолонкаЗначение.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		КонецЕсли;
	КонецЕсли;
		
	КолонкаЗначение.ПутьКДанным = "ЗначенияКонстанты.Значение";

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКонстанты()

	ЗначенияКонстант = РегистрыСведений.бит_ЗначенияНастроекУчета.ЗначенияВсехКонстант();
	
	ЗначенияКонстанты.Загрузить(
		ЗначенияКонстант.Скопировать(
			Новый Структура("Идентификатор", ДанныеКонстанты.Идентификатор),
			"Разрез, Значение"));

КонецПроцедуры

&НаКлиенте
Функция ЗначенияКонстантыЗаполненыКорректно()
	
	Отказ = Ложь;

	КоличествоСтрокСПустымРазрезом = 0;
	
	Для каждого СтрокаЗначенияКонстанты Из ЗначенияКонстанты Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаЗначенияКонстанты.Разрез) Тогда
			КоличествоСтрокСПустымРазрезом = КоличествоСтрокСПустымРазрезом + 1;
		КонецЕсли;
		
		Если ДанныеКонстанты.ОбязательноеЗаполнение
			И ДанныеКонстанты.ТипЗначения <> Новый ОписаниеТипов("Булево")
			И Не ЗначениеЗаполнено(СтрокаЗначенияКонстанты.Значение) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru='Для константы недопустим ввод незаполненных значений'"),
				, // КлючДанных
				СтрШаблон(
					"ЗначенияКонстанты[%1].Значение",
					Формат(ЗначенияКонстанты.Индекс(КоличествоСтрокСПустымРазрезом), "ЧГ=0")),
				, // ПутьКДанным
				Отказ);
					
					
					
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрокСПустымРазрезом > 1 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Допустимо только одно значение по пустому разрезу'"),
			, // КлючДанных
			СтрШаблон(
				"ЗначенияКонстанты[%1].Разрез",
				Формат(ЗначенияКонстанты.Индекс(КоличествоСтрокСПустымРазрезом), "ЧГ=0")),
			, // ПутьКДанным
			Отказ);
				
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

&НаСервере
Функция СохранитьЗначенияСервер()

	ТаблицаЗначенияКонстанты = ЗначенияКонстанты.Выгрузить();
	
	РегистрыСведений.бит_ЗначенияНастроекУчета.УстановитьЗначенияКонстантыСРазрезом(
		ДанныеКонстанты.Константа,
		ТаблицаЗначенияКонстанты);
		
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначенияКонстанты, Новый УникальныйИдентификатор);	

КонецФункции

#КонецОбласти
