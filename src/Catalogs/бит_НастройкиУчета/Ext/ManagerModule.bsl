
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает созданную или найденную по идентификатору константу.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//
// Возвращаемое значение:
//   СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на созданную/найденную константу.
//
Функция НайтиСоздатьКонстанту(Идентификатор) Экспорт
	
	ОписаниеКонстанты = бит_ОбщегоНазначенияПолныеПрава.ОписаниеКонстанты(Идентификатор);
	
	Если ОписаниеКонстанты = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Попытка обращения к неизвестной константе %1'"), Идентификатор);
	КонецЕсли;
	
	ДанныеКонстантыБД = ДанныеКонстантыБД(Идентификатор);
	
	Если ДанныеКонстантыБД = Неопределено Тогда
		
		НачатьТранзакцию();
		
		Попытка
		
			УстановитьБлокировкуНаСправочникКонстант();
			Константа = СоздатьКонстантуБД(ОписаниеКонстанты);
		
		Исключение
				
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не удалось создать константу %1'"), Идентификатор));
				
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				
			ВызватьИсключение;
				
		КонецПопытки;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Иначе
		
		Если ТребуетсяОбновлениеКонстанты(ДанныеКонстантыБД, ОписаниеКонстанты) Тогда
			ОбновитьКонстантуБД(ДанныеКонстантыБД.Константа, ОписаниеКонстанты);
		КонецЕсли;
		
		Константа = ДанныеКонстантыБД.Константа;
		
	КонецЕсли;
	
	Возврат Константа;
		
КонецФункции

// Возвращает описание константы.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - Строка таблицы описания констант, в которой содержится полная информация о константе.
//   	Описание колонок строки таблицы см. в НовыйТаблицаОписанияКонстант().
//
Функция ОписаниеКонстанты(Идентификатор) Экспорт

	ТаблицаОписанияКонстант = бит_ОбщегоНазначенияПолныеПрава.ТаблицаОписанияКонстант();
	
	ОписаниеКонстанты = ТаблицаОписанияКонстант.Найти(Идентификатор, "Идентификатор");
	
	Если ОписаниеКонстанты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеКонстанты.ЗначениеПоУмолчанию = Неопределено Тогда
		Если ОписаниеКонстанты.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = Ложь;
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Строка" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = "";
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Число" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = 0;
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Дата" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеКонстанты;

КонецФункции

// Возвращает таблицу полного описания констант. Это главное место описания всех констант расширения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица описания констант, в которой содержится полная информация о всех актуальных константах.
//   Описание колонок таблицы см. в НовыйТаблицаОписанияКонстант().
//
Функция ТаблицаОписанияКонстант() Экспорт

	ТаблицаОписанияКонстант = НовыйТаблицаОписанияКонстант();
		
	//ОписаниеТипаВидыКонтактнойИнформации = Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации")
	//ОписаниеТипаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	//ОписаниеТипаСклады = Новый ОписаниеТипов("СправочникСсылка.Склады");
	//ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	//ПРИМЕРЫ:
	
	#Область Раздел_Продажи
		
	//// Продажи / Склады
	//Раздел = "Продажи.Склады";
	//
	//НоваяКонстанта = ДобавитьОписаниеКонстанты(
	//	ТаблицаОписанияКонстант,
	//	"СкладГотовойПродукции",
	//	НСтр("ru='Склад готовой продукции'"),
	//	ОписаниеТипаСклады,
	//	Раздел);
	//НоваяКонстанта.ТипРазреза = ОписаниеТипаОрганизации;
	//НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	//НоваяКонстанта.Описание = НСтр("ru='Склад готовой продукции.'");
		
	#КонецОбласти
		
	#Область Раздел_НСИ
	
	//// НСИ / Контрагенты
	//Раздел = "НСИ.Контрагенты";

	//НоваяКонстанта = ДобавитьОписаниеКонстанты(
	//	ТаблицаОписанияКонстант,
	//	"ВидКИПочтаДляСверкиВРублях",
	//	НСтр("ru='Вид контактной информации: почта для сверки взаиморасчетов в рублях'"),
	//	,
	//	Раздел);
	//НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	//НоваяКонстанта.Описание = НСтр("ru='Вид контактной информации для указания почты контрагента для сверки взаиморасчетов в рублях'");
	
	#КонецОбласти
		
	#Область Раздел_ФункциональныеОпции
	
	//// Функциональные опции / Продажи
	//Раздел = "ФункциональныеОпции.Продажи";
	//НоваяКонстанта = ДобавитьОписаниеКонстанты(
	//	ТаблицаОписанияКонстант,
	//	"ИспользоватьИнтеграциюСертификатовНоменклатуры",
	//	НСтр("ru = 'Использовать интеграцию сертификатов номенклатуры.'"),
	//	ОписаниеТипаБулево,
	//	Раздел);
	//НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	//НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'");
		
	
	#КонецОбласти // Раздел_ФункциональныеОпции
		
	Возврат ТаблицаОписанияКонстант;

КонецФункции

// Возвращает представления имен групп констант, которые необходимы для формирования интерфейса заполнения констант.
//
// Возвращаемое значение:
//   Структура - Соответствия имен и представлений групп констант, у которых синоним не совпадает с именем.
//
Функция ПредставленияГруппКонстант() Экспорт

	// Указываются представления разделов и подразделов, у которых синоним не совпадает с именем.
	ПредставленияГруппКонстант = Новый Структура;

	// ПРИМЕР
	//ПредставленияГруппКонстант.Вставить("АвтоматическоеЗаполнениеРеквизитов", НСтр("ru = 'Автоматическое заполнение реквизитов'"));
	
	Возврат ПредставленияГруппКонстант;

КонецФункции

// Возвращает таблицу полного описания констант. Это главное место описания всех констант расширения.
//
// Параметры:
//  ТолькоАктуальные - Булево - Если истина, то в таблицу попадут только те константы, которые есть в описании констант.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений констант.
//   	* Константа - СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на константу.
//   	* ПометкаУдаления - Булево - Признак пометки удаления.
//   	* Наименование - Строка - Наименование константы из справочника.
//   	* Идентификатор - Строка - Идентификатор константы.
//   	* Описание - Строка - Описание константы из справочника.
//
Функция ТаблицаКонстантБД(ТолькоАктуальные) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_НастройкиУчета.Ссылка КАК Константа,
	|	бит_НастройкиУчета.ПометкаУдаления КАК ПометкаУдаления,
	|	бит_НастройкиУчета.Наименование КАК Наименование,
	|	бит_НастройкиУчета.Идентификатор КАК Идентификатор,
	|	бит_НастройкиУчета.Описание КАК Описание
	|ИЗ
	|	Справочник.бит_НастройкиУчета КАК бит_НастройкиУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	ПометкаУдаления";
	
	ТаблицаКонстантБД = Запрос.Выполнить().Выгрузить();
	
	Если ТолькоАктуальные Тогда
		
		СтрокиКонстантБДУдалить = Новый Массив;
		
		Для каждого СтрокаКонстантыБД Из ТаблицаКонстантБД Цикл
		
			Если СтрокаКонстантыБД.ПометкаУдаления
				Или ПустаяСтрока(СтрокаКонстантыБД.Идентификатор) Тогда
				
				СтрокиКонстантБДУдалить.Добавить(СтрокаКонстантыБД);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаКонстантыБД Из СтрокиКонстантБДУдалить Цикл
			ТаблицаКонстантБД.Удалить(СтрокаКонстантыБД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКонстантБД;
	
КонецФункции

// Приводит состояние констант в БД в соответствии с актуальными константами, содержащимися в таблице описания констант.
// Все константы, имиеющие одинаковый идентификатор кроме первой помечаются на удаление, в них очищается идентификатор.
// По удаляемым константам очищаются значения в регистре.
// Если в элементе справочника константы ключевые реквизиты (Наименование, Описание и др.) отличаются от описания,
// то они обновляются.
//
Процедура АктуализироватьКонстанты() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	// Исключаем возможность одновременной актуализации констант несколькими пользователями,
	// вследствии чего в теории могут образоваться дубли.
	УстановитьБлокировкуНаСправочникКонстант();
	
	ТаблицаКонстантБД = ТаблицаКонстантБД(Ложь);
	ТаблицаКонстантБД.Индексы.Добавить("Идентификатор");
	
	ТаблицаОписанияКонстант = бит_ОбщегоНазначенияПолныеПрава.ТаблицаОписанияКонстант();
	ТаблицаОписанияКонстант.Индексы.Добавить("Идентификатор");
	
	// Сравнить данные всех констант из БД с таблицей описания констант, выявить неописанные константы.
	КонстантыУдалить = Новый Массив;
	
    Для каждого ДанныеКонстантыБД Из ТаблицаКонстантБД Цикл
	
		Если ПустаяСтрока(ДанныеКонстантыБД.Идентификатор) Тогда
			
			Если Не ДанныеКонстантыБД.ПометкаУдаления Тогда
				КонстантыУдалить.Добавить(ДанныеКонстантыБД.Константа);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ПараметрыПоискаОписания = Новый Структура("Идентификатор", ДанныеКонстантыБД.Идентификатор);
			СтрокиОписанияКонстанты = ТаблицаОписанияКонстант.НайтиСтроки(ПараметрыПоискаОписания);
			Если СтрокиОписанияКонстанты.Количество() = 0 Тогда
				КонстантыУдалить.Добавить(ДанныеКонстантыБД.Константа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	// Создать отсутствующие константы и актуализировать ключевые поля, выявить неактуальные константы.
	Для каждого ОписаниеКонстанты Из ТаблицаОписанияКонстант Цикл
	
		ПараметрыПоискаКонстанты = Новый Структура("Идентификатор", ОписаниеКонстанты.Идентификатор);	
	    СтрокиДанныеКонстанты = ТаблицаКонстантБД.НайтиСтроки(ПараметрыПоискаКонстанты);
		
		Если СтрокиДанныеКонстанты.Количество() = 0 Тогда
			
			Попытка
				СоздатьКонстантуБД(ОписаниеКонстанты, Истина);
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не удалось создать константу %1'"), ОписаниеКонстанты.Идентификатор));
					
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
					
				ВызватьИсключение;	
			КонецПопытки;
			
		Иначе
			
			Если ТребуетсяОбновлениеКонстанты(СтрокиДанныеКонстанты[0], ОписаниеКонстанты) Тогда
				
				Попытка
					ОбновитьКонстантуБД(СтрокиДанныеКонстанты[0].Константа, ОписаниеКонстанты);
				Исключение
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось обновить константу %1'"), ОписаниеКонстанты.Идентификатор));
						
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
						
					ВызватьИсключение;	
				КонецПопытки;
			КонецЕсли;
			
			Для Индекс = 1 По СтрокиДанныеКонстанты.ВГраница() Цикл
				Если КонстантыУдалить.Найти(СтрокиДанныеКонстанты[Индекс].Константа) Тогда
					КонстантыУдалить.Добавить(СтрокиДанныеКонстанты[Индекс].Константа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Пометить на удаление и очистить значения неактульных констант.
	Для каждого КонстантаУдалить Из КонстантыУдалить Цикл
	
		Попытка
			ОчиститьДанныеНеактуальнойКонстанты(КонстантаУдалить);
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не удалось очистить данные константы %1'"), КонстантаУдалить));
				
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				
			ВызватьИсключение;	
		КонецПопытки;
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаОписанияКонстант()
	
	ТаблицаОписанияКонстант = Новый ТаблицаЗначений;
	ТаблицаОписанияКонстант.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаОписанияКонстант.Колонки.Добавить("ЗначениеПоУмолчанию", ТипЗначенияКонстантПоУмолчанию());
	ТаблицаОписанияКонстант.Колонки.Добавить("ТипРазреза", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОписанияКонстант.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОписанияКонстант.Колонки.Добавить("Раздел", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Подраздел", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ТаблицаОписанияКонстант.Колонки.Добавить("РежимПароля", Новый ОписаниеТипов("Булево"));
	
	// Свойства для констант, тип значения которых располагается в другом расширении.
	ТаблицаОписанияКонстант.Колонки.Добавить("ХранитьСтроковыйГУИД", Новый ОписаниеТипов("Булево"));
	ТаблицаОписанияКонстант.Колонки.Добавить("ИмяТипа", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	// Имя особой формы редактирования значения константы.
	ТаблицаОписанияКонстант.Колонки.Добавить("ИмяФормы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Возврат ТаблицаОписанияКонстант;
	
КонецФункции

Функция ТипЗначенияКонстантПоУмолчанию()
	
	// Типы из регистра.
	ТипыЗначенийКонстантПоУмолчанию = Новый Массив;
	
	ОписаниеТиповРегистра = Метаданные.РегистрыСведений.бит_ЗначенияНастроекУчета.Ресурсы.Значение.Тип;
	Для каждого Тип Из ОписаниеТиповРегистра.Типы() Цикл
		ТипыЗначенийКонстантПоУмолчанию.Добавить(Тип);
	КонецЦикла;
		
	Возврат Новый ОписаниеТипов(ТипыЗначенийКонстантПоУмолчанию);
	
КонецФункции

Функция ДобавитьОписаниеКонстанты(ТаблицаОписанияКонстант, Идентификатор, Наименование, ТипЗначения, ПутьГруппыНастроек)

	НоваяКонстанта = ТаблицаОписанияКонстант.Добавить();
	
	НоваяКонстанта.Идентификатор = Идентификатор;
	НоваяКонстанта.Наименование = Наименование;
	НоваяКонстанта.ТипЗначения = ТипЗначения;
	
	Если СтрНайти(ПутьГруппыНастроек, ".") > 0 Тогда
		// Заданы и раздел, и подраздел, либо только подраздел.
		ЧастиГруппыНастроек = СтрРазделить(ПутьГруппыНастроек, ".", Истина);
		Если ЧастиГруппыНастроек.Количество() = 2 Тогда
			НоваяКонстанта.Раздел = ЧастиГруппыНастроек[0];
			НоваяКонстанта.Подраздел = ЧастиГруппыНастроек[1];
		КонецЕсли;
	Иначе
		// Подраздел не задан, раздел также может быть пустым.
		НоваяКонстанта.Раздел = ПутьГруппыНастроек;
	КонецЕсли;
	
	Возврат НоваяКонстанта;

КонецФункции

Функция ДанныеКонстантыБД(Идентификатор)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_НастройкиУчета.Ссылка КАК Константа,
	|	бит_НастройкиУчета.ПометкаУдаления КАК ПометкаУдаления,
	|	бит_НастройкиУчета.Наименование КАК Наименование,
	|	бит_НастройкиУчета.Идентификатор КАК Идентификатор,
	|	бит_НастройкиУчета.Описание КАК Описание
	|ИЗ
	|	Справочник.бит_НастройкиУчета КАК бит_НастройкиУчета
	|ГДЕ
	|	бит_НастройкиУчета.Идентификатор = &Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция КлючевыеПоляКонстант()

	КлючевыеПоляКонстант = Новый Массив;
	
	КлючевыеПоляКонстант.Добавить("Идентификатор");
	КлючевыеПоляКонстант.Добавить("Наименование");
	КлючевыеПоляКонстант.Добавить("Описание");
	
	Возврат КлючевыеПоляКонстант;

КонецФункции

Функция ТребуетсяОбновлениеКонстанты(ДанныеКонстантыБД, ОписаниеКонстанты)

	Если ДанныеКонстантыБД.ПометкаУдаления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		Если ДанныеКонстантыБД[ИмяПоля] <> ОписаниеКонстанты[ИмяПоля] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура ОбновитьКонстантуБД(Константа, ОписаниеКонстанты)

	УстановитьПривилегированныйРежим(Истина);
	
	КонстантаОбъект = Константа.ПолучитьОбъект();
	
	КонстантаОбъект.ПометкаУдаления = Ложь;
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		КонстантаОбъект[ИмяПоля] = ОписаниеКонстанты[ИмяПоля];
	КонецЦикла;

	КонстантаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПроверки", Истина);
    КонстантаОбъект.Записать();
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Обновлена константа %1'"), КонстантаОбъект.Ссылка));
	
КонецПроцедуры

Функция СоздатьКонстантуБД(ОписаниеКонстанты, ВыводитьСообщениеПользователю = Ложь)
	
	КонстантаОбъект = Справочники.бит_НастройкиУчета.СоздатьЭлемент();
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		КонстантаОбъект[ИмяПоля] = ОписаниеКонстанты[ИмяПоля];
	КонецЦикла;

    КонстантаОбъект.Записать();
	
	Если ВыводитьСообщениеПользователю Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Создана константа %1'"), КонстантаОбъект.Ссылка));
	КонецЕсли;
	
	Возврат КонстантаОбъект.Ссылка;

КонецФункции

Процедура УстановитьБлокировкуНаСправочникКонстант()

	Блокировка = Новый БлокировкаДанных;
	БлокировкаСправочникКонстант = Блокировка.Добавить("Справочник.бит_НастройкиУчета");
	БлокировкаСправочникКонстант.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ОчиститьДанныеНеактуальнойКонстанты(Константа)

	НаборЗаписейЗначенийКонстанты = РегистрыСведений.бит_ЗначенияНастроекУчета.СоздатьНаборЗаписей();
	НаборЗаписейЗначенийКонстанты.Отбор.Константа.Установить(Константа);
	НаборЗаписейЗначенийКонстанты.Прочитать();
	
	Если НаборЗаписейЗначенийКонстанты.Количество() Тогда
		
		НаборЗаписейЗначенийКонстанты.Очистить();
		НаборЗаписейЗначенийКонстанты.Записать();
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Очищено значение неактуальной константы %1'"), Константа));
		
	КонецЕсли;
	
	КонстантаОбъект = Константа.ПолучитьОбъект();
	КонстантаОбъект.ПометкаУдаления = Истина;
	КонстантаОбъект.Идентификатор = "";
	КонстантаОбъект.Записать();
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Помечена на удаление неактуальная константа %1'"), Константа));

КонецПроцедуры

#КонецОбласти

#КонецЕсли
